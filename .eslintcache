[{"E:\\wamp64\\www\\netflixclone\\src\\index.js":"1","E:\\wamp64\\www\\netflixclone\\src\\App.js":"2","E:\\wamp64\\www\\netflixclone\\src\\routes.js":"3","E:\\wamp64\\www\\netflixclone\\src\\pages\\Details\\index.js":"4","E:\\wamp64\\www\\netflixclone\\src\\pages\\Home\\index.js":"5","E:\\wamp64\\www\\netflixclone\\src\\pages\\MovieList\\index.js":"6","E:\\wamp64\\www\\netflixclone\\src\\pages\\SerieList\\index.js":"7","E:\\wamp64\\www\\netflixclone\\src\\services\\tmdb.js":"8","E:\\wamp64\\www\\netflixclone\\src\\components\\FeaturedMovie\\index.js":"9","E:\\wamp64\\www\\netflixclone\\src\\components\\Header\\index.js":"10","E:\\wamp64\\www\\netflixclone\\src\\components\\MovieRow\\index.js":"11","E:\\wamp64\\www\\netflixclone\\src\\components\\Footer\\index.js":"12","E:\\wamp64\\www\\netflixclone\\src\\components\\Cards\\index.js":"13"},{"size":153,"mtime":1612328436000,"results":"14","hashOfConfig":"15"},{"size":158,"mtime":1612328436000,"results":"16","hashOfConfig":"15"},{"size":597,"mtime":1612328436000,"results":"17","hashOfConfig":"15"},{"size":9755,"mtime":1612864334649,"results":"18","hashOfConfig":"15"},{"size":2265,"mtime":1612328436000,"results":"19","hashOfConfig":"15"},{"size":2584,"mtime":1612861902022,"results":"20","hashOfConfig":"15"},{"size":2638,"mtime":1612646415006,"results":"21","hashOfConfig":"15"},{"size":4418,"mtime":1612862437742,"results":"22","hashOfConfig":"15"},{"size":1755,"mtime":1612328436000,"results":"23","hashOfConfig":"15"},{"size":1102,"mtime":1612328436000,"results":"24","hashOfConfig":"15"},{"size":1598,"mtime":1612328436000,"results":"25","hashOfConfig":"15"},{"size":334,"mtime":1612328436000,"results":"26","hashOfConfig":"15"},{"size":752,"mtime":1612328436000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ac0d5e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"E:\\wamp64\\www\\netflixclone\\src\\index.js",[],["57","58"],"E:\\wamp64\\www\\netflixclone\\src\\App.js",[],"E:\\wamp64\\www\\netflixclone\\src\\routes.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\Details\\index.js",["59","60","61","62","63","64"],"E:\\wamp64\\www\\netflixclone\\src\\pages\\Home\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\MovieList\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\SerieList\\index.js",["65"],"import React, { useState, useEffect } from 'react';\nimport Tmdb from '../../services/tmdb';\nimport Header from '../../components/Header';\nimport Cards from '../../components/Cards';\nimport './styles.css';\n\nfunction SerieList() {\n\n    const [serieList, setSerieList] = useState([]);\n    const [serie, setSerie] = useState('serie');\n    const [increment, setIncrement] = useState(1);\n    const [blackHeader, setBlackHeader] = useState(false);\n    const [currentPage, setcurrentPage] = useState(1);\n    const [totalPage, setTotalPage] = useState();\n    \n\n    useEffect(() => {\n        const scrollListener = () => {\n            if (window.scrollY > 70) {\n                setBlackHeader(true);\n            } else {\n                setBlackHeader(false);\n            }\n        }\n        window.addEventListener('scroll', scrollListener);\n\n        return () => {\n            window.removeEventListener('scroll', scrollListener);\n        }\n    }, []);\n\n    const morePaginator = async () => {\n        // pegando lista total de filmes\n        let list = await Tmdb.getList('tv');\n        \n        // Incrementando o valor de increment + 1 para colocar o valor no número da página\n        setIncrement(increment + 1);\n\n        // Incrementando o valor da página atual + 1 para fazer a paginação\n        let page = await Tmdb.paginator(list.page + increment, 'tv');\n        setSerieList(page.results);\n\n        // Pegando valor da página atual para incluir o valor no botão da páginação\n        setcurrentPage(page.page);\n\n        // Fazendo o scroll da página para a paginação\n        window.scroll({\n            top: 0,\n            behavior: 'smooth'\n          });\n    }\n\n    useEffect(() => {\n        const loadAll = async () => {\n            // pegando lista total de filmes\n            let list = await Tmdb.getList('tv');\n            setSerieList(list.results);\n\n\n            // Pegando valor total de páginas para incluir o valor no botão da páginação\n            setTotalPage(list.total_pages);\n        }\n        loadAll();\n    }, []);\n\n    return (\n        <div>\n            <Header black={blackHeader} />\n            <div className=\"uk-container uk-container-xlarge\">\n                <div className=\"serie--container-cards uk-grid-match\">\n                    {serieList.map((item, key) => (\n                        <Cards key={key} items={item} type={serie} />\n                    ))}\n                </div>\n                <button onClick={morePaginator} className=\"serie--button-paginator\">carregar mais (Pag. {currentPage} de {totalPage})</button>\n            </div>\n        </div>\n    );\n}\n\nexport default SerieList;","E:\\wamp64\\www\\netflixclone\\src\\services\\tmdb.js",["66"],"const API_KEY = '798b6117fd2bd742df2bb796d1b1722c';\nconst API_BASE = 'https://api.themoviedb.org/3';\n// 48f3bdcd1e13f7025297f59240670e47d6970e64\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    credits: async (type, creditId) => {\n        const req = await fetch(`${API_BASE}/${type}/${creditId}/credits?api_key=${API_KEY}`);\n        const json = await req.json();\n        return json;\n    },\n    markFavorite: async (accountId, type, mediaId) => {\n        const req = await fetch(`${API_BASE}/account/${accountId}/favorite?api_key=${API_KEY}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(\n                {\n                    media_type: type,\n                    media_id: mediaId,\n                    favorite: true\n                }\n            )\n        });\n        const json = await req.json();\n        return json;\n    },\n    sessionId: async (token) => {\n        const req = await fetch(`${API_BASE}/authentication/session/new?api_key=${API_KEY}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ request_token: token })\n        });\n        const json = await req.json();\n        return json;\n    },\n    newToken: async () => {\n        const req = await fetch(`${API_BASE}/authentication/token/new?api_key=${API_KEY}`);\n        const json = await req.json();\n        return json;\n    },\n    paginator: async (page, discover) => {\n        const req = await fetch(`${API_BASE}/discover/${discover}?api_key=${API_KEY}&language=pt-BR&page=${page}`);\n        const json = await req.json();\n        return json;\n    },\n\n    getList: async (discover) => {\n        const req = await fetch(`${API_BASE}/discover/${discover}?api_key=${API_KEY}&language=pt-BR`);\n        const json = await req.json();\n        return json;\n    },\n\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'treding',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ];\n    },\n\n    getMovieInfo: async(movieId, type) => {\n        let info = {};\n\n        if(movieId) {\n            switch(type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default:\n                    info = null;\n                break;\n            }\n        }\n\n        return info;\n    }\n}","E:\\wamp64\\www\\netflixclone\\src\\components\\FeaturedMovie\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Header\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\MovieRow\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Footer\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Cards\\index.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":8,"column":8,"nodeType":"73","messageId":"74","endLine":8,"endColumn":16},{"ruleId":"71","severity":1,"message":"76","line":82,"column":11,"nodeType":"73","messageId":"74","endLine":82,"endColumn":26},{"ruleId":"71","severity":1,"message":"77","line":90,"column":11,"nodeType":"73","messageId":"74","endLine":90,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":117,"column":8,"nodeType":"80","endLine":117,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":150,"column":81,"nodeType":"84","endLine":150,"endColumn":112},{"ruleId":"71","severity":1,"message":"85","line":10,"column":19,"nodeType":"73","messageId":"74","endLine":10,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":10,"column":1,"nodeType":"88","endLine":127,"endColumn":2},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'next' is defined but never used.","Identifier","unusedVar","'previous' is defined but never used.","'handleLeftArrow' is assigned a value but never used.","'handleRightArrow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'type'. Either include them or remove the dependency array.","ArrayExpression",["91"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setSerie' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [id, type]",{"range":"94","text":"95"},[4036,4038],"[id, type]"]