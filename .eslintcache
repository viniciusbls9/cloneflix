[{"E:\\wamp64\\www\\netflixclone\\src\\index.js":"1","E:\\wamp64\\www\\netflixclone\\src\\App.js":"2","E:\\wamp64\\www\\netflixclone\\src\\routes.js":"3","E:\\wamp64\\www\\netflixclone\\src\\pages\\Details\\index.js":"4","E:\\wamp64\\www\\netflixclone\\src\\pages\\Home\\index.js":"5","E:\\wamp64\\www\\netflixclone\\src\\pages\\MovieList\\index.js":"6","E:\\wamp64\\www\\netflixclone\\src\\pages\\SerieList\\index.js":"7","E:\\wamp64\\www\\netflixclone\\src\\services\\tmdb.js":"8","E:\\wamp64\\www\\netflixclone\\src\\components\\FeaturedMovie\\index.js":"9","E:\\wamp64\\www\\netflixclone\\src\\components\\Header\\index.js":"10","E:\\wamp64\\www\\netflixclone\\src\\components\\MovieRow\\index.js":"11","E:\\wamp64\\www\\netflixclone\\src\\components\\Footer\\index.js":"12","E:\\wamp64\\www\\netflixclone\\src\\components\\Cards\\index.js":"13"},{"size":153,"mtime":1612328436000,"results":"14","hashOfConfig":"15"},{"size":158,"mtime":1612328436000,"results":"16","hashOfConfig":"15"},{"size":597,"mtime":1612328436000,"results":"17","hashOfConfig":"15"},{"size":4249,"mtime":1612632123451,"results":"18","hashOfConfig":"15"},{"size":2265,"mtime":1612328436000,"results":"19","hashOfConfig":"15"},{"size":2623,"mtime":1612328436000,"results":"20","hashOfConfig":"15"},{"size":2638,"mtime":1612328436000,"results":"21","hashOfConfig":"15"},{"size":3625,"mtime":1612328436000,"results":"22","hashOfConfig":"15"},{"size":1755,"mtime":1612328436000,"results":"23","hashOfConfig":"15"},{"size":1102,"mtime":1612328436000,"results":"24","hashOfConfig":"15"},{"size":1598,"mtime":1612328436000,"results":"25","hashOfConfig":"15"},{"size":334,"mtime":1612328436000,"results":"26","hashOfConfig":"15"},{"size":752,"mtime":1612328436000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ac0d5e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"E:\\wamp64\\www\\netflixclone\\src\\index.js",[],["58","59"],"E:\\wamp64\\www\\netflixclone\\src\\App.js",[],"E:\\wamp64\\www\\netflixclone\\src\\routes.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\Details\\index.js",["60","61","62","63","64","65","66","67","68","69","70","71"],"import React, { useState, useEffect } from 'react';\nimport Header from '../../components/Header';\nimport Tmdb from '../../services/tmdb';\nimport { useParams } from 'react-router-dom';\n\n// MODAL\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\nimport './styles.css';\n\nfunction Details() {\n    let { id, type } = useParams();\n\n    const [detailsInfos, setDetailsInfos] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [firstDate, setFirstDate] = useState('');\n    const [open, setOpen] = useState(false);\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const handlePermission = async () => {\n        let token = await Tmdb.newToken();\n        if (token.success) {\n            // Salvando o token do usuário no Localstorage e redirecionando para o TMDB para permitir\n            window.location.href = `https://www.themoviedb.org/authenticate/${token.request_token}?redirect_to=http://localhost:3000/`;\n            localStorage.setItem('token', token.request_token);\n\n        } else {\n            alert('Opa, seu pedido deu falha ): Tente novamente');\n        }\n    }\n\n    const handleFavorite = async () => {\n        let token = localStorage.getItem('token');\n        if (token) {\n\n            // Salvando a sessão do usuário após aprovação do token\n            let session = await Tmdb.sessionId(token);\n            localStorage.setItem('session', session.session_id);\n\n            // Fazer a ação de salvar o filme/serie\n            console.log('salvo');\n\n        } else {\n            setOpen(true);\n        }\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    useEffect(() => {\n        const infos = async () => {\n            let info = await Tmdb.getMovieInfo(id, type);\n            let genres = [];\n            for (let i in info.genres) {\n                genres.push(info.genres[i].name);\n            }\n\n            let date = new Date(info.first_air_date);\n            setFirstDate(date.getFullYear());\n\n            console.log(Array(info));\n            setGenres(genres);\n            setDetailsInfos(Array(info));\n        }\n        infos();\n    }, []);\n\n    return (\n        <div>\n            <Header />\n            {detailsInfos.map((item, key) => (\n                <div key={key}>\n                    <section className=\"banner--details\" style={{\n                        backgroundSize: 'cover',\n                        backgroundPosition: 'center',\n                        backgroundImage: `url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces/${item.backdrop_path})`,\n                    }}>\n                        <div className=\"banner--gradient\"></div>\n                    </section>\n                    <div className=\"banner--container\">\n                        <div className=\"banner--contents\">\n                            <div className=\"banner--content-image\">\n                                <img src={`https://www.themoviedb.org//t/p/w300_and_h450_bestv2/${item.poster_path}`} alt=\"\" />\n                            </div>\n\n                            <div className=\"banner--content-texts\">\n                                <div>\n                                    <h1>{item.name}</h1>\n                                    <span>({firstDate})</span>\n                                </div>\n                                <p>{genres.join(', ')}</p>\n                                <div className=\"serie--overal\">\n                                    <b>{item.vote_average} %</b>\n                                </div>\n                                <h3>Sinopse</h3>\n                                <p>{item.overview}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Details;","E:\\wamp64\\www\\netflixclone\\src\\pages\\Home\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\MovieList\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\pages\\SerieList\\index.js",["72"],"import React, { useState, useEffect } from 'react';\nimport Tmdb from '../../services/tmdb';\nimport Header from '../../components/Header';\nimport Cards from '../../components/Cards';\nimport './styles.css';\n\nfunction SerieList() {\n\n    const [serieList, setSerieList] = useState([]);\n    const [serie, setSerie] = useState('serie');\n    const [increment, setIncrement] = useState(1);\n    const [blackHeader, setBlackHeader] = useState(false);\n    const [currentPage, setcurrentPage] = useState(1);\n    const [totalPage, setTotalPage] = useState();\n    \n\n    useEffect(() => {\n        const scrollListener = () => {\n            if (window.scrollY > 70) {\n                setBlackHeader(true);\n            } else {\n                setBlackHeader(false);\n            }\n        }\n        window.addEventListener('scroll', scrollListener);\n\n        return () => {\n            window.removeEventListener('scroll', scrollListener);\n        }\n    }, []);\n\n    const morePaginator = async () => {\n        // pegando lista total de filmes\n        let list = await Tmdb.getList('tv');\n        \n        // Incrementando o valor de increment + 1 para colocar o valor no número da página\n        setIncrement(increment + 1);\n\n        // Incrementando o valor da página atual + 1 para fazer a paginação\n        let page = await Tmdb.paginator(list.page + increment, 'tv');\n        setSerieList(page.results);\n\n        // Pegando valor da página atual para incluir o valor no botão da páginação\n        setcurrentPage(page.page);\n\n        // Fazendo o scroll da página para a paginação\n        window.scroll({\n            top: 0,\n            behavior: 'smooth'\n          });\n    }\n\n    useEffect(() => {\n        const loadAll = async () => {\n            // pegando lista total de filmes\n            let list = await Tmdb.getList('tv');\n            setSerieList(list.results);\n\n\n            // Pegando valor total de páginas para incluir o valor no botão da páginação\n            setTotalPage(list.total_pages);\n        }\n        loadAll();\n    }, []);\n\n    return (\n        <div>\n            <Header black={blackHeader} />\n            <div className=\"uk-container uk-container-xlarge\">\n                <div className=\"serie--container-cards uk-grid-match\">\n                    {serieList.map((item, key) => (\n                        <Cards key={key} items={item} type={serie} />\n                    ))}\n                </div>\n                <button onClick={morePaginator} className=\"serie--button-paginator\">carregar mais (Pag. {currentPage} de {totalPage})</button>\n            </div>\n        </div>\n    );\n}\n\nexport default SerieList;","E:\\wamp64\\www\\netflixclone\\src\\services\\tmdb.js",["73"],"const API_KEY = '798b6117fd2bd742df2bb796d1b1722c';\nconst API_BASE = 'https://api.themoviedb.org/3';\n// 48f3bdcd1e13f7025297f59240670e47d6970e64\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    sessionId: async (token) => {\n        const req = await fetch(`${API_BASE}/authentication/session/new?api_key=${API_KEY}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ request_token: token })\n        });\n        const json = await req.json();\n        return json;\n    },\n    newToken: async () => {\n        const req = await fetch(`${API_BASE}/authentication/token/new?api_key=${API_KEY}`);\n        const json = await req.json();\n        return json;\n    },\n    paginator: async (page, discover) => {\n        const req = await fetch(`${API_BASE}/discover/${discover}?api_key=${API_KEY}&language=pt-BR&page=${page}`);\n        const json = await req.json();\n        return json;\n    },\n\n    getList: async (discover) => {\n        const req = await fetch(`${API_BASE}/discover/${discover}?api_key=${API_KEY}&language=pt-BR`);\n        const json = await req.json();\n        return json;\n    },\n\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'treding',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ];\n    },\n\n    getMovieInfo: async(movieId, type) => {\n        let info = {};\n\n        if(movieId) {\n            switch(type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default:\n                    info = null;\n                break;\n            }\n        }\n\n        return info;\n    }\n}","E:\\wamp64\\www\\netflixclone\\src\\components\\FeaturedMovie\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Header\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\MovieRow\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Footer\\index.js",[],"E:\\wamp64\\www\\netflixclone\\src\\components\\Cards\\index.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":7,"column":8,"nodeType":"80","messageId":"81","endLine":7,"endColumn":14},{"ruleId":"78","severity":1,"message":"82","line":8,"column":8,"nodeType":"80","messageId":"81","endLine":8,"endColumn":14},{"ruleId":"78","severity":1,"message":"83","line":9,"column":8,"nodeType":"80","messageId":"81","endLine":9,"endColumn":21},{"ruleId":"78","severity":1,"message":"84","line":10,"column":8,"nodeType":"80","messageId":"81","endLine":10,"endColumn":21},{"ruleId":"78","severity":1,"message":"85","line":11,"column":8,"nodeType":"80","messageId":"81","endLine":11,"endColumn":25},{"ruleId":"78","severity":1,"message":"86","line":12,"column":8,"nodeType":"80","messageId":"81","endLine":12,"endColumn":19},{"ruleId":"78","severity":1,"message":"87","line":24,"column":12,"nodeType":"80","messageId":"81","endLine":24,"endColumn":16},{"ruleId":"78","severity":1,"message":"88","line":26,"column":11,"nodeType":"80","messageId":"81","endLine":26,"endColumn":21},{"ruleId":"78","severity":1,"message":"89","line":28,"column":11,"nodeType":"80","messageId":"81","endLine":28,"endColumn":27},{"ruleId":"78","severity":1,"message":"90","line":40,"column":11,"nodeType":"80","messageId":"81","endLine":40,"endColumn":25},{"ruleId":"78","severity":1,"message":"91","line":56,"column":11,"nodeType":"80","messageId":"81","endLine":56,"endColumn":22},{"ruleId":"92","severity":1,"message":"93","line":76,"column":8,"nodeType":"94","endLine":76,"endColumn":10,"suggestions":"95"},{"ruleId":"78","severity":1,"message":"96","line":10,"column":19,"nodeType":"80","messageId":"81","endLine":10,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":10,"column":1,"nodeType":"99","endLine":104,"endColumn":2},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'open' is assigned a value but never used.","'fullScreen' is assigned a value but never used.","'handlePermission' is assigned a value but never used.","'handleFavorite' is assigned a value but never used.","'handleClose' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'type'. Either include them or remove the dependency array.","ArrayExpression",["102"],"'setSerie' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [id, type]",{"range":"105","text":"106"},[2565,2567],"[id, type]"]